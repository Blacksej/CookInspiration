@page "/recipe"
@page "/recipe/{id:int}"
@using RecipeModelLibrary.Models
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons
@inject IRecipeService IRecipeService

@if (Id == null)
{
    <PageTitle>Create a new recipe</PageTitle>
    <h3>Create a new recipe</h3>
}
else
{
    <PageTitle>Edit @recipe.Name</PageTitle>
    <h3>Edit @recipe.Name</h3>
}

<EditForm Model="recipe" OnSubmit="HandleSubmit">
    <div>
        <label for="name">Recipe Name</label>
        <InputText id="name" @bind-Value="recipe.Name" class="form-control"></InputText>
    </div>
    <div>
        <label for="description">Recipe Description</label>
        <InputText id="description" @bind-Value="recipe.Description" class="form-control"></InputText>
    </div>
    <div>
        <label for="image">Recipe Image</label>
        <InputText id="image" @bind-Value="recipe.Image" class="form-control"></InputText>
    </div>
    <div>
        <label>Ingredients</label><br />
        <InputSelect @bind-Value="recipe.Ingredients" class="form-select">
            @foreach (var ingredient in IRecipeService.Ingredients)
            {
                <option value="@ingredient.IngredientId">@ingredient.NameAndAmount</option>
            }
        </InputSelect>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    Recipe recipe = new Recipe();

    string btnText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Save new recipe" : "Update recipe";
        await IRecipeService.GetRecipes();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            recipe.Ingredients = IRecipeService.Ingredients;
        }
        else
        {
            recipe = await IRecipeService.GetSingleRecipe((int)Id);
        }
    }

    async Task HandleSubmit()
    {
        if(Id == null)
        {
            await IRecipeService.CreateRecipe(recipe);
        }
        else
        {
            await IRecipeService.UpdateRecipe(recipe);
        }
    }

    async Task DeleteHero()
    {
        await IRecipeService.DeleteRecipe(recipe.RecipeId);
    }
}
